{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","msg","Formulario","busqueda","setBusqueda","setConsulta","useState","error","setError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","consulta","setResultado","useEffect","a","url","fetch","respuesta","json","resul","cod","consultaAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.99e58195.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Header = ({ titulo }) => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper light-blue darken-2\">\n        <a href=\"#!\" className=\"brand-logo\">\n          {titulo}\n        </a>\n      </div>\n    </nav>\n  );\n};\nHeader.propTypes = {\n  titulo: PropTypes.string.isRequired,\n};\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Error = ({ msg }) => {\n  return <p className=\"red darken-4 error\">{msg}</p>;\n};\nError.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\nexport default Error;\n","import React, { useState } from \"react\";\nimport Error from \"./Error\";\nimport PropTypes from \"prop-types\";\nconst Formulario = ({ busqueda, setBusqueda, setConsulta }) => {\n  const [error, setError] = useState(false);\n  const { ciudad, pais } = busqueda;\n  const handleChange = (e) => {\n    setBusqueda({\n      ...busqueda,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (ciudad.trim() === \"\" || pais.trim() === \"\") {\n      setError(true);\n      return;\n    }\n    setError(false);\n    setConsulta(true);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      {error ? <Error msg=\"Todos los campos son obligatorios\" /> : null}\n      <div className=\"input-field col s12\">\n        <input\n          type=\"text\"\n          name=\"ciudad\"\n          id=\"ciudad\"\n          value={ciudad}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"ciudad\">Ciudad:</label>\n      </div>\n      <div className=\"input-field col s12\">\n        <select name=\"pais\" id=\"pais\" value={pais} onChange={handleChange}>\n          <option value=\"\">--Seleccione--</option>\n          <option value=\"US\">Estados Unidos</option>\n          <option value=\"MX\">México</option>\n          <option value=\"AR\">Argentina</option>\n          <option value=\"CO\">Colombia</option>\n          <option value=\"CR\">Costa Rica</option>\n          <option value=\"ES\">España</option>\n          <option value=\"PE\">Perú</option>\n        </select>\n        <label htmlFor=\"pais\">Pais:</label>\n      </div>\n      <div className=\"input-field col s12\">\n        <input\n          type=\"submit\"\n          value=\"Buscar clima\"\n          className=\"waves-effect waves-light btn-large btn-bloc yellow accent-4\"\n        />\n      </div>\n    </form>\n  );\n};\nFormulario.propTypes = {\n  busqueda: PropTypes.object.isRequired,\n  setBusqueda: PropTypes.func.isRequired,\n  setConsulta: PropTypes.func.isRequired,\n};\nexport default Formulario;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Clima = ({ resultado }) => {\n  const { main, name } = resultado;\n  if (!name) return null;\n  return (\n    <div className=\"card-panel white col s12\">\n      <div className=\"black-text\">\n        <h2>EL CLIMA DE {name} ES:</h2>\n        <p className=\"temperatura\">\n          {parseFloat(main.temp - 273.15, 10).toFixed(2)}\n          <span>&#x2103;</span>\n        </p>\n        <p>\n          Temperatura máxima:\n          {parseFloat(main.temp_max - 273.15, 10).toFixed(2)}\n          <span>&#x2103;</span>\n        </p>\n        <p>\n          Temperatura minima\n          {parseFloat(main.temp_min - 273.15, 10).toFixed(2)}\n          <span>&#x2103;</span>\n        </p>\n      </div>\n    </div>\n  );\n};\nClima.propTypes = {\n  resultado: PropTypes.object.isRequired,\n};\n\nexport default Clima;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport Clima from \"./components/clima\";\nimport Error from \"./components/Error\";\nfunction App() {\n  const [busqueda, setBusqueda] = useState({\n    ciudad: \"\",\n    pais: \"\",\n  });\n  const { ciudad, pais } = busqueda;\n  const [consulta, setConsulta] = useState(false);\n  const [resultado, setResultado] = useState({});\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const consultaAPI = async () => {\n      if (consulta) {\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=2e2becf15ab311f47c7cd361617b06e4`;\n        const respuesta = await fetch(url);\n        const resul = await respuesta.json();\n        setResultado(resul);\n        setConsulta(false);\n      }\n      if (resultado.cod === \"404\") {\n        setError(true);\n      } else {\n        setError(false);\n      }\n    };\n    consultaAPI();\n  }, [consulta]);\n  /* let componente;\n if(error){\n   componente=<Error mensaje=\"No hay resultado intenta otra vez\"/>\n\n }else{\n   componente=<Clima resultado={resultado}/>\n }\n */\n  return (\n    <Fragment>\n      <Header titulo={\"Clima React\"} />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                busqueda={busqueda}\n                setBusqueda={setBusqueda}\n                setConsulta={setConsulta}\n              />\n            </div>\n            <div className=\"col m4 s12\">\n              {error ? (\n                <Error msg=\"No hay resultado intenta otra vez\" />\n              ) : (\n                <Clima resultado={resultado} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}